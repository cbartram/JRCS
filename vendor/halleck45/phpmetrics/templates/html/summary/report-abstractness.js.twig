{% autoescape false %}
<script type="text/javascript">

    function updateAbstractnessChart() {
            chartAbstractness();
    };

    function chartAbstractness() {
        if(chartAbstractness.initiazed) return;
        chartAbstractness.initiazed = true;

        var xData = 'abstractness';
        var yData = 'instability';
        var rData = 'loc';

        var chart;
        nv.addGraph(function() {
            chart = nv.models.scatterChart()
                    .showDistX(true)
                    .showDistY(true)
                    .useVoronoi(false)
                    .showLegend(false)
                    .color(d3.scale.category10().range())
                    .transitionDuration(300)
                    .forceY([0, 1])
                    .forceX([0, 1])
            ;

            chart.xAxis.tickFormat(d3.format('.02f'))
                    .axisLabel('Abstractness');
            chart.yAxis.tickFormat(d3.format('.02f'))
                    .axisLabel('Instability')
            chart.tooltipContent(function(key, x, y, e, graph) {
                return '<h2>' + e.point.name + '</h2>';
            });
            chart.scatter.useVoronoi(false);

            d3.select("#svg-abstractness").select("svg")
                    .attr("width",380)
                    .attr("height",300)
                    .attr("class",'svg')
                    .datum(mapDatas(groupedData))
                    .call(chart);

            nv.utils.windowResize(chart.update);

            chart.dispatch.on('stateChange', function(e) { ('New State:', JSON.stringify(e)); });


            // line (legend)
            chart = nv.models.lineChart()
                    .options({
                        margin: {left: 75, bottom: 50},
                        x: function(d,i) { return i},
                        showXAxis: false,
                        showYAxis: false,
                        showLegend: false,
                        transitionDuration: 300
                    })
                    .forceY([0, 1])
                    .forceX([0, 1])
            ;

            d3.select("#svg-abstractness").select("svg")
                    .datum([{key:" ", values:[ {x:0, y:1}, {x:1, y:0}  ]  , color: '#EEE'  }])
                    .attr("width",380)
                    .attr("height",300)
                    .call(chart);



            // btn save as
            var svg = document.getElementById('svg-abstractness').childNodes[0],
                    xml  = new XMLSerializer().serializeToString(svg),
                    xmldata = btoa(xml);
            document.getElementById('btn-save-abstractness').href = 'data:application/octet-stream;base64,' + xmldata;

            return chart;
        });

        function mapDatas(root) {
            var results = [
                { key: textify(xData) + " / " + textify(yData) + " chart", "values": [] }
            ];
            var i;
            for(i in root) {
                var e = root[i];
                results[0].values.push({
                    "name": e.name
                    , "x": Math.max(0,parseFloat(e[xData]))
                    , "y": Math.max(0,parseFloat(e[yData]))
                    , size: Math.max(0,parseFloat([rData]))
                    , shape: 'round'
                });
            }
            return results;
        }
    }
</script>
{% endautoescape %}