{% autoescape false %}
<script type="text/javascript">

    function updateMaintainabilityChart() {
        chartMaintainability();
    };

    function chartMaintainability() {
        var maxHeight = document.getElementById('svg-maintainability').offsetHeight,
            maxWidth = document.getElementById('svg-maintainability').offsetWidth,
            format = d3.format(",d"),
            color = d3.scale.category20c();

        var bubble = d3.layout.pack()
            .sort(null)
            .size([maxWidth, maxHeight])
            .padding(1.5);

        var r = d3.scale.linear().range([1, maxWidth / 4]).domain([1, 100]);
        var x = d3.scale.linear().range([1, maxWidth]);
        var y = d3.scale.linear().range([1, maxHeight]);



        d3.select("#svg-maintainability").html("<svg></svg>");
        var svg = d3.select("#svg-maintainability").select("svg")
            .attr("width", maxWidth)
            .attr("height", maxHeight)
            .attr("class", "bubble");


        // accessibility for colorblind
        var defs= svg.append('defs');
        defs.append('pattern')
                    .attr('id', 'hash-warning')
                    .attr('patternUnits', 'userSpaceOnUse')
                    .attr('width', 4)
                    .attr('height', 4)
                    .append('path')
                        .attr('d', 'M-1,1 l2,-2 M0,4 l4,-4 M3,5 l2,-2')
                        .attr('stroke', '#000000')
                        .attr('stroke-width', 1);
        defs.append('pattern')
                    .attr('id', 'hash-critical')
                    .attr('patternUnits', 'userSpaceOnUse')
                    .attr('width', 4)
                    .attr('height', 4)
                    .append('path')
                        .attr('d', 'M-1,1 l2,-2 M0,4 l4,-4 M3,5 l2,-2')
                        .attr('stroke', '#000000')
                        .attr('stroke-width', 3);
        defs.append('pattern')
                .attr('id', 'hash-good')
                .attr('patternUnits', 'userSpaceOnUse')
                .attr('width', 5)
                .attr('height', 5)
                .append('circle')
                    .attr('cx', 2)
                    .attr('cy', 2)
                    .attr('r', 2)
                    .attr('style', "stroke:none;fill:#eee");

        // initialization
        d3
            .select('#svg-maintainability')
            .datum(data)
            .call(bubble)
                ;

        var node = svg.selectAll(".node")
            .data(
                bubble.nodes(mapDatas(data))
                .filter(function(d) { return !d.children; })
            )
            .enter().append("g")
            .attr("class", "node");

            node
                .append('circle')
                // uncomment following line if you want fixed size for your bubble (cyclo=1 => size=1)
                //.attr("r", function(d) { return r(d.value);})
                .attr("r", function(d) { return d.r; })
                .attr("x", function(d) { return x(d.x)})
                .attr("y", function(d) { return y(d.y)})

                .attr("transform", function(d) { return "translate(" + d.x + "," + d.y + ")"; })
                // events
                .on('mouseover', function(d) {
                    var text = '<strong>' + d.name + '</strong>'
                            + "<br />Cyclomatic Complexity : " + format(d.cyclomaticComplexity)
                            + "<br />Maintainability Index: " + format(d.maintainabilityIndex);
                    d3.select('.tooltip').html(text);
                    d3.select(".tooltip").style("opacity", 1);
                })
                .on('mousemove', function() {
                    d3.select(".tooltip")
                            .style("left", (d3.event.pageX + 5) + "px")
                            .style("top",  (d3.event.pageY + 5) + "px");
                })
                .on('mouseout', function() {
                    d3.select(".tooltip").style("opacity", 0);
                })
                // for colorblinds
                .style("fill", function(d) {
                    if(accessibilityEnabled) {
                        return 'url(#hash-'+ validate('maintainabilityIndex', d.maintainabilityIndex) +')'
                    }
                    switch(validate('maintainabilityIndex', d.maintainabilityIndex)) {
                        case 'good':
                            return '#78BA00';
                        case 'warning':
                            return '#F4B300';
                        case 'critical':
                            return '#FF2E12';
                        default:
                            return '#CCCCCC';
                    }
                })
                .style('stroke-width', function(d) {
                    return accessibilityEnabled ? 1 : 0;
                })
                .style('stroke', '#000')
        ;

        // tooltip
        d3.select("body")
                .append("div")
                .attr("class", "tooltip")
                .style("opacity", 0);

        // Save as
        function mapDatas(root) {
            var datas = [];
            var i, color;
            for(i in root) {
                var e = root[i];
                datas.push({
                    "value": parseFloat(e.cyclomaticComplexity) + 1
                    , "name": e.filename
                    , "cyclomaticComplexity": parseFloat(e.cyclomaticComplexity)
                    , "maintainabilityIndex": parseInt(e.maintainabilityIndex)
                });
            }
            return {"children":datas};
        }

        d3.select(self.frameElement).style("height", maxWidth + "px");


        // Save as
        document.getElementById('btn-save-maintainability').onmouseover = function() {
            var e = this;
            if(e.className != 'initialized') {
                var svgc  = document.getElementById('svg-maintainability').childNodes[0]
                        , xml  = new XMLSerializer().serializeToString(svgc)
                        , xmldata = btoa(xml);
                e.href = 'data:application/octet-stream;base64,' + xmldata;
                e.className = 'initialized';
            }
        };


    }






</script>
{% endautoescape %}
